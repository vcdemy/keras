{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"1\ufe0f\u20e3 Keras \u6df1\u5ea6\u5b78\u7fd2\u5165\u9580","text":""},{"location":"#keras","title":"\ud83c\udfaf Keras \u662f\u4ec0\u9ebc\uff1f","text":"<p>Keras \u662f\u4e00\u500b \u57fa\u65bc TensorFlow \u7684\u9ad8\u5c64\u6df1\u5ea6\u5b78\u7fd2\u6846\u67b6\uff0c\u63d0\u4f9b\u7c21\u55ae\u6613\u7528\u7684 API\uff0c\u8b93\u958b\u767c\u8005\u53ef\u4ee5\u5feb\u901f\u69cb\u5efa\u548c\u8a13\u7df4\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\u3002</p> <p>\u2705 \u70ba\u4ec0\u9ebc\u4f7f\u7528 Keras\uff1f</p> <ul> <li>\u6613\u65bc\u4e0a\u624b\uff1a\u7c21\u55ae\u76f4\u89ba\u7684 API\uff0c\u964d\u4f4e\u958b\u767c\u9580\u6abb\u3002</li> <li>\u5f37\u5927\u9748\u6d3b\uff1a\u652f\u63f4 Sequential API \u548c Functional API\u3002</li> <li>\u8207 TensorFlow \u7121\u7e2b\u6574\u5408\uff1a\u53ef\u76f4\u63a5\u8abf\u7528 TensorFlow \u7684\u5e95\u5c64\u529f\u80fd\u3002</li> <li>\u652f\u63f4 GPU \u52a0\u901f\uff1a\u52a0\u901f\u6df1\u5ea6\u5b78\u7fd2\u8a13\u7df4\u3002</li> <li>\u5ee3\u6cdb\u61c9\u7528\uff1a\u5f71\u50cf\u5206\u985e\u3001\u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08NLP\uff09\u3001\u6642\u9593\u5e8f\u5217\u9810\u6e2c\u7b49\u3002</li> </ul>"},{"location":"#keras_1","title":"\ud83c\udfaf Keras \u7684\u61c9\u7528\u5834\u666f","text":"<p>Keras \u53ef\u7528\u65bc \u5f71\u50cf\u8655\u7406\u3001\u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08NLP\uff09\u3001\u5f37\u5316\u5b78\u7fd2 \u7b49\u9818\u57df\u3002</p> <p>\ud83d\udd39 \u5f71\u50cf\u8655\u7406\uff08CNN\uff09 - \u5f71\u50cf\u5206\u985e\uff08\u5982\u8c93\u72d7\u5206\u985e\uff09 - \u7269\u4ef6\u5075\u6e2c\uff08YOLO\u3001Faster R-CNN\uff09 - \u98a8\u683c\u8f49\u63db\uff08Style Transfer\uff09</p> <p>\ud83d\udd39 \u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08RNN / LSTM\uff09 - \u6587\u5b57\u751f\u6210\uff08Chatbot\u3001\u6a5f\u5668\u7ffb\u8b6f\uff09 - \u6587\u5b57\u5206\u985e\uff08\u60c5\u611f\u5206\u6790\u3001\u5783\u573e\u90f5\u4ef6\u5075\u6e2c\uff09 - \u8a9e\u97f3\u8fa8\u8b58</p> <p>\ud83d\udd39 \u5f37\u5316\u5b78\u7fd2\uff08Deep Reinforcement Learning\uff09 - \u81ea\u52d5\u99d5\u99db - \u904a\u6232 AI\uff08\u5982 AlphaGo\uff09 - \u667a\u6167\u6a5f\u5668\u4eba\u63a7\u5236</p>"},{"location":"#_1","title":"\ud83d\udd17 \u672c\u6559\u5b78\u7db2\u7ad9\u7684\u5167\u5bb9","text":"<p>\u672c\u7db2\u7ad9\u5c07\u5f9e \u57fa\u790e\u5230\u9032\u968e\uff0c\u5e36\u4f60\u5b78\u6703\u5982\u4f55\u4f7f\u7528 Keras \u9032\u884c\u6df1\u5ea6\u5b78\u7fd2\u958b\u767c\u3002</p> \u7ae0\u7bc0 \u5167\u5bb9 1\ufe0f\u20e3 \u9996\u9801\uff08Home\uff09 \u4ecb\u7d39 Keras\uff0c\u61c9\u7528\u5834\u666f 2\ufe0f\u20e3 \u5b89\u88dd\u8207\u57fa\u672c\u4f7f\u7528 \u5b89\u88dd\u3001\u5efa\u7acb\u7b2c\u4e00\u500b\u6a21\u578b 3\ufe0f\u20e3 Keras \u57fa\u672c\u6a21\u578b Sequential API, Functional API 4\ufe0f\u20e3 \u6a21\u578b\u8a13\u7df4\u8207\u8a55\u4f30 \u53cd\u5411\u50b3\u64ad\u3001\u512a\u5316\u5668\u3001\u640d\u5931\u51fd\u6578 5\ufe0f\u20e3 Keras \u6578\u64da\u8655\u7406 \u8a13\u7df4\u6578\u64da\u9810\u8655\u7406\u8207\u589e\u5f37 6\ufe0f\u20e3 CNN\uff08\u5377\u7a4d\u795e\u7d93\u7db2\u8def\uff09 \u5f71\u50cf\u8655\u7406\u61c9\u7528 7\ufe0f\u20e3 RNN\uff08\u5faa\u74b0\u795e\u7d93\u7db2\u8def\uff09 NLP \u61c9\u7528 8\ufe0f\u20e3 \u8f49\u79fb\u5b78\u7fd2 \u4f7f\u7528 ResNet\u3001VGG16 \u7b49\u9810\u8a13\u7df4\u6a21\u578b 9\ufe0f\u20e3 \u5f37\u5316\u5b78\u7fd2\u61c9\u7528 Q-learning, DQN \ud83d\udd1f \u9032\u968e\u61c9\u7528\u8207\u5c08\u6848 AI \u5be6\u4f5c\u5c08\u6848 <p>\ud83d\ude80 \u73fe\u5728\uff0c\u4f60\u5df2\u7d93\u5c0d Keras \u6709\u521d\u6b65\u4e86\u89e3\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2\u5982\u4f55\u5b89\u88dd\u8207\u4f7f\u7528 Keras\uff01 \ud83d\ude0a</p>"},{"location":"about/","title":"\u95dc\u65bc\u6211\u5011","text":"<p>\u552f\u5ba2\u5b78\u9662\u7684\u524d\u8eab\u53eb\u505a\u9ad8\u96c4Python\u5b78\u9662\uff01\u4f46\u662f\u56e0\u70ba\u6559\u5b78\u5167\u5bb9\u5df2\u7d93\u5305\u542bPython\u4ee5\u5916\u7684\u8ab2\u7a0b\uff0c\u6240\u4ee5\u5c07\u540d\u7a31\u4e0a\u7684Python\u53bb\u6389\u6539\u70ba\u552f\u5ba2\u5b78\u9662\uff0c\u552f\u5ba2(Vic)\u662f\u5275\u8fa6\u4ebaVictor\u7684\u66b1\u7a31\u3002</p> <p>\u5728\u7576\u524d\u9019\u500b\u6642\u4ee3\u7684\u7522\u54c1\u6216\u670d\u52d9\u5927\u81f4\u4e0a\u5fc5\u9808\u5177\u5099\u884c\u52d5\u5316(Mobilized)\u3001\u7db2\u8def\u5316(Networked)\u3001\u81ea\u52d5\u5316(Automated)\u3001\u667a\u6167\u5316(Intelligent)\u7b49\u7b49\u7684\u7279\u6027\uff0c\u800c\u4e14\u958b\u767c\u7684\u6642\u7a0b\u8981\u8d8a\u77ed\u8d8a\u597d\u3002\u5728\u6211\u5011\u7684\u8ab2\u7a0b\u4e2d\uff0c\u6211\u5011\u5e0c\u671b\u7528\u6700\u6dfa\u986f\u6613\u61c2\u7684\u65b9\u5f0f\uff0c\u8b93\u5927\u5bb6\u53ef\u4ee5\u8fc5\u901f\u7684\u4f7f\u7528\u4eba\u5de5\u667a\u6167\u3001\u91d1\u878d\u79d1\u6280\u3001\u7269\u806f\u7db2\u3001\u8cc7\u6599\u5206\u6790\u7b49\u6280\u8853\uff0c\u958b\u767c\u51fa\u5177\u5099\u884c\u52d5\u5316\u3001\u7db2\u8def\u5316\u3001\u81ea\u52d5\u5316\u3001\u667a\u6167\u5316\u7b49\u529f\u80fd\u7684\u7522\u54c1\u6216\u670d\u52d9\u7684MVP\u3002</p> <p>\u5982\u679c\u60a8\u89ba\u5f97\u9019\u500b\u8ab2\u7a0b\u5c0d\u60a8\u6709\u5e6b\u52a9\uff0c\u8a18\u5f97\u8981\u5e6b\u5fd9\u63a8\u85a6\u7d66\u60a8\u7684\u670b\u53cb\u5594\uff01\u611f\u8b1d\u60a8\uff01</p> <p>\u524d\u5f80\u7c89\u7d72\u5c08\u9801  Email\u6211\u5011 </p>"},{"location":"advanced/","title":"\ud83d\udd1f \u9032\u968e\u61c9\u7528\u8207\u5c08\u6848\u793a\u7bc4","text":""},{"location":"advanced/#keras","title":"\ud83c\udfaf Keras \u7684\u9032\u968e\u61c9\u7528","text":"<p>\u73fe\u5728\u6211\u5011\u5df2\u7d93\u5b78\u6703\u4e86 Keras \u7684\u57fa\u790e\u8207\u6838\u5fc3\u6982\u5ff5\uff0c\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u63a2\u7d22 Keras \u5728\u5be6\u969b\u5c08\u6848\u4e2d\u7684\u61c9\u7528\u3002</p> <p>\u2705 \u9032\u968e\u61c9\u7528\u9818\u57df\uff1a</p> <ol> <li>\u5f71\u50cf\u5206\u985e\uff08Image Classification\uff09</li> <li>\u7269\u4ef6\u5075\u6e2c\uff08Object Detection\uff09</li> <li>\u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08NLP\uff09</li> <li>\u6642\u9593\u5e8f\u5217\u9810\u6e2c\uff08Time Series Forecasting\uff09</li> <li>\u751f\u6210\u5c0d\u6297\u7db2\u8def\uff08GANs\uff09</li> </ol>"},{"location":"advanced/#image-classification","title":"\u2705 \u5f71\u50cf\u5206\u985e\u5c08\u6848\u793a\u7bc4\uff08Image Classification\uff09","text":"<p>\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 Keras \u4f86\u5efa\u7acb\u4e00\u500b\u5f71\u50cf\u5206\u985e\u6a21\u578b\uff0c\u4f8b\u5982 CIFAR-10 \u6578\u64da\u96c6\u3002</p> <pre><code>from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.datasets import cifar10\n\n# \u8f09\u5165 CIFAR-10 \u6578\u64da\u96c6\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n\n# \u6b63\u898f\u5316\u6578\u64da\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# \u5efa\u7acb CNN \u6a21\u578b\nmodel = keras.Sequential([\n    layers.Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)),\n    layers.MaxPooling2D((2,2)),\n    layers.Conv2D(64, (3,3), activation='relu'),\n    layers.MaxPooling2D((2,2)),\n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(10, activation='softmax')\n])\n\n# \u7de8\u8b6f\u6a21\u578b\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# \u8a13\u7df4\u6a21\u578b\nmodel.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))\n</code></pre> <p>\u2705 \u9019\u662f\u4e00\u500b\u9069\u7528\u65bc\u5f71\u50cf\u5206\u985e\u7684 CNN \u6a21\u578b\uff0c\u9069\u5408\u61c9\u7528\u65bc\u7269\u4ef6\u8fa8\u8b58\u7b49\u4efb\u52d9\u3002</p>"},{"location":"advanced/#nlp","title":"\u2705 NLP \u61c9\u7528\uff08\u60c5\u611f\u5206\u6790\uff09","text":"<p>Keras \u4e5f\u53ef\u4ee5\u7528\u65bc \u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08NLP\uff09\uff0c\u4f8b\u5982\u60c5\u611f\u5206\u6790\u3002</p> <pre><code>from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# \u5efa\u7acb\u8a13\u7df4\u6578\u64da\ndocuments = [\"I love this movie!\", \"This film is terrible.\", \"Amazing story and characters.\"]\nlabels = [1, 0, 1]  # 1: \u6b63\u9762\u60c5\u7dd2, 0: \u8ca0\u9762\u60c5\u7dd2\n\n# Tokenization\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(documents)\nsequences = tokenizer.texts_to_sequences(documents)\n\n# \u586b\u5145\u5e8f\u5217\npadded_sequences = pad_sequences(sequences, maxlen=10)\n</code></pre> <p>\u2705 \u9019\u6a23\u53ef\u4ee5\u5c07\u6587\u5b57\u8f49\u63db\u70ba\u6578\u503c\u8868\u793a\uff0c\u4ee5\u4fbf\u8f38\u5165\u5230 NLP \u6a21\u578b\u4e2d\u9032\u884c\u8a13\u7df4\u3002</p>"},{"location":"advanced/#_2","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u61c9\u7528\u9818\u57df \u7bc4\u4f8b \u5f71\u50cf\u5206\u985e <code>CNN</code> \u8655\u7406 CIFAR-10 \u6578\u64da\u96c6 \u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08NLP\uff09 \u6587\u5b57 Tokenization \u8207\u60c5\u611f\u5206\u6790 \u6642\u9593\u5e8f\u5217\u9810\u6e2c <code>LSTM</code> \u8655\u7406\u91d1\u878d\u6578\u64da\u9810\u6e2c \u7269\u4ef6\u5075\u6e2c <code>YOLO</code> \u9032\u884c\u5373\u6642\u5f71\u50cf\u5206\u6790 \u751f\u6210\u5c0d\u6297\u7db2\u8def\uff08GANs\uff09 \u5f71\u50cf\u751f\u6210\u8207\u98a8\u683c\u8f49\u63db <p>\ud83d\ude80 \u606d\u559c\u4f60\uff01\u4f60\u5df2\u7d93\u5b8c\u6210\u4e86 Keras \u6559\u5b78\u8ab2\u7a0b\uff01\u73fe\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528 Keras \u69cb\u5efa\u81ea\u5df1\u7684\u6df1\u5ea6\u5b78\u7fd2\u5c08\u6848\u4e86\uff01\ud83c\udf89 \ud83d\ude0a</p>"},{"location":"cnn/","title":"6\ufe0f\u20e3 CNN\uff08\u5377\u7a4d\u795e\u7d93\u7db2\u8def\uff09","text":""},{"location":"cnn/#cnn","title":"\ud83c\udfaf \u4ec0\u9ebc\u662f CNN\uff1f","text":"<p>\u5377\u7a4d\u795e\u7d93\u7db2\u8def\uff08Convolutional Neural Network, CNN\uff09\u662f\u4e00\u7a2e\u5c08\u9580\u7528\u65bc \u5f71\u50cf\u8655\u7406 \u7684\u795e\u7d93\u7db2\u8def\uff0c\u80fd\u5920\u5b78\u7fd2\u5f71\u50cf\u7684 \u7279\u5fb5\uff08Features\uff09\uff0c\u5982\u908a\u7de3\u3001\u7d0b\u7406\u3001\u5f62\u72c0\u7b49\u3002</p> <p>\u2705 CNN \u7684\u6838\u5fc3\u6982\u5ff5\uff1a</p> <ol> <li>\u5377\u7a4d\u5c64\uff08Convolutional Layer\uff09</li> <li>\u6c60\u5316\u5c64\uff08Pooling Layer\uff09</li> <li>\u5168\u9023\u63a5\u5c64\uff08Fully Connected Layer\uff09</li> </ol>"},{"location":"cnn/#cnn_1","title":"\u2705 \u5efa\u7acb\u4e00\u500b CNN \u6a21\u578b","text":"<p>\u6211\u5011\u4f7f\u7528 Keras \u4f86\u5efa\u7acb\u4e00\u500b\u57fa\u672c\u7684 CNN\u3002</p> <pre><code>from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# \u5efa\u7acb CNN \u6a21\u578b\nmodel = keras.Sequential([\n    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n    layers.MaxPooling2D((2,2)),\n    layers.Conv2D(64, (3,3), activation='relu'),\n    layers.MaxPooling2D((2,2)),\n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(10, activation='softmax')\n])\n\n# \u7de8\u8b6f\u6a21\u578b\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n</code></pre> <p>\u2705 \u9019\u662f\u4e00\u500b\u9069\u7528\u65bc MNIST \u6578\u5b57\u5206\u985e\u7684\u57fa\u672c CNN \u7d50\u69cb\u3002</p>"},{"location":"cnn/#convolutional-layer","title":"\u2705 \u4ec0\u9ebc\u662f\u5377\u7a4d\u5c64\uff1f\uff08Convolutional Layer\uff09","text":"<p>\u5377\u7a4d\u5c64\u900f\u904e \u6ffe\u6ce2\u5668\uff08Filters\uff09 \u4f86\u64f7\u53d6\u5f71\u50cf\u7279\u5fb5\u3002</p> <pre><code>layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1))\n</code></pre> <p>\u2705 \u9019\u8868\u793a\u4f7f\u7528 32 \u500b 3\u00d73 \u7684\u6ffe\u6ce2\u5668\u4f86\u8655\u7406\u5f71\u50cf\u3002</p>"},{"location":"cnn/#pooling-layer","title":"\u2705 \u4ec0\u9ebc\u662f\u6c60\u5316\u5c64\uff1f\uff08Pooling Layer\uff09","text":"<p>\u6c60\u5316\u5c64\u53ef\u4ee5 \u964d\u4f4e\u5f71\u50cf\u5c3a\u5bf8\uff0c\u6e1b\u5c11\u8a08\u7b97\u6210\u672c\uff0c\u4e26\u4fdd\u7559\u91cd\u8981\u7279\u5fb5\u3002</p> <pre><code>layers.MaxPooling2D((2,2))\n</code></pre> <p>\u2705 \u9019\u8868\u793a\u6bcf 2\u00d72 \u5340\u57df\u53d6\u6700\u5927\u503c\uff0c\u4ee5\u6e1b\u5c11\u5f71\u50cf\u5c3a\u5bf8\u3002</p>"},{"location":"cnn/#cnn_2","title":"\u2705 \u8a13\u7df4 CNN \u6a21\u578b","text":"<p>\u6211\u5011\u4f7f\u7528 MNIST \u6578\u64da\u96c6\u4f86\u8a13\u7df4\u9019\u500b CNN\u3002</p> <pre><code>from tensorflow.keras.datasets import mnist\nimport numpy as np\n\n# \u8f09\u5165 MNIST \u6578\u64da\u96c6\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# \u6b63\u898f\u5316\u6578\u64da\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# \u589e\u52a0\u7dad\u5ea6\uff0c\u8b93 CNN \u53ef\u8655\u7406\nx_train = np.expand_dims(x_train, axis=-1)\nx_test = np.expand_dims(x_test, axis=-1)\n\n# \u8a13\u7df4\u6a21\u578b\nmodel.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))\n</code></pre> <p>\u2705 \u9019\u6703\u8a13\u7df4 5 \u500b epochs\uff0c\u4e26\u4f7f\u7528 32 \u500b batch size \u4f86\u66f4\u65b0\u6b0a\u91cd\u3002</p>"},{"location":"cnn/#_1","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u529f\u80fd \u8a9e\u6cd5 \u5377\u7a4d\u5c64 <code>Conv2D(filters, kernel_size, activation)</code> \u6c60\u5316\u5c64 <code>MaxPooling2D(pool_size)</code> \u6a21\u578b\u8a13\u7df4 <code>model.fit(x_train, y_train, epochs, batch_size)</code> <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u4f7f\u7528 Keras \u5efa\u7acb CNN\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2 RNN\uff08\u5faa\u74b0\u795e\u7d93\u7db2\u8def\uff09\u7684\u61c9\u7528\uff01 \ud83d\ude0a</p>"},{"location":"installation/","title":"2\ufe0f\u20e3 \u5b89\u88dd\u8207\u57fa\u672c\u4f7f\u7528","text":""},{"location":"installation/#keras","title":"\ud83c\udfaf \u5982\u4f55\u5b89\u88dd Keras\uff1f","text":"<p>Keras \u662f \u57fa\u65bc TensorFlow \u7684\u6df1\u5ea6\u5b78\u7fd2\u6846\u67b6\uff0c\u56e0\u6b64\u6211\u5011\u9700\u8981\u5b89\u88dd TensorFlow \u4f86\u4f7f\u7528 Keras\u3002</p> <p>\u2705 \u5b89\u88dd TensorFlow \u548c Keras</p> <pre><code>pip install tensorflow keras\n</code></pre> <p>\u2705 \u6aa2\u67e5\u5b89\u88dd\u662f\u5426\u6210\u529f</p> <pre><code>import tensorflow as tf\nprint(tf.__version__)\nprint(tf.keras.__version__)\n</code></pre> <p>\ud83d\ude80 \u5982\u679c\u6210\u529f\u986f\u793a TensorFlow \u548c Keras \u7248\u672c\uff0c\u8868\u793a\u5b89\u88dd\u5b8c\u6210\uff01</p>"},{"location":"installation/#keras_1","title":"\ud83c\udfaf \u5efa\u7acb\u7b2c\u4e00\u500b Keras \u6a21\u578b","text":"<p>\u6211\u5011\u4f7f\u7528 Sequential API \u4f86\u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u795e\u7d93\u7db2\u8def\u3002</p> <pre><code>from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# \u5efa\u7acb\u6a21\u578b\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(10,)),\n    layers.Dense(1, activation='sigmoid')\n])\n\n# \u7de8\u8b6f\u6a21\u578b\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# \u67e5\u770b\u6a21\u578b\u7d50\u69cb\nmodel.summary()\n</code></pre> <p>\u2705 \u9019\u662f\u4e00\u500b\u7c21\u55ae\u7684\u5168\u9023\u63a5\u795e\u7d93\u7db2\u8def\uff08DNN\uff09\uff0c\u9069\u7528\u65bc\u4e8c\u5143\u5206\u985e\u4efb\u52d9\u3002</p>"},{"location":"installation/#_1","title":"\ud83c\udfaf \u8a13\u7df4\u8207\u8a55\u4f30\u6a21\u578b","text":"<p>\u6211\u5011\u4f7f\u7528 \u5047\u8a2d\u7684\u8a13\u7df4\u6578\u64da \u4f86\u8a13\u7df4\u6a21\u578b\u3002</p> <pre><code>import numpy as np\n\n# \u5efa\u7acb\u5047\u8a2d\u6578\u64da\nx_train = np.random.rand(100, 10)\ny_train = np.random.randint(0, 2, size=(100,))\n\n# \u8a13\u7df4\u6a21\u578b\nmodel.fit(x_train, y_train, epochs=10, batch_size=32)\n</code></pre> <p>\u2705 \u9019\u5c07\u8a13\u7df4\u6a21\u578b 10 \u500b epochs\uff0c\u6bcf\u6b21 batch \u70ba 32\u3002</p>"},{"location":"installation/#_2","title":"\u8a55\u4f30\u6a21\u578b","text":"<pre><code>x_test = np.random.rand(20, 10)\ny_test = np.random.randint(0, 2, size=(20,))\n\nloss, acc = model.evaluate(x_test, y_test)\nprint(f\"\u6e2c\u8a66\u6e96\u78ba\u7387\uff1a{acc:.2f}\")\n</code></pre> <p>\u2705 \u9019\u5c07\u5728\u6e2c\u8a66\u6578\u64da\u4e0a\u8a55\u4f30\u6a21\u578b\u7684\u8868\u73fe\u3002</p>"},{"location":"installation/#_3","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u529f\u80fd \u8a9e\u6cd5 \u5b89\u88dd Keras <code>pip install tensorflow keras</code> \u5efa\u7acb\u6a21\u578b <code>keras.Sequential([...])</code> \u7de8\u8b6f\u6a21\u578b <code>model.compile(optimizer, loss, metrics)</code> \u8a13\u7df4\u6a21\u578b <code>model.fit(x_train, y_train, epochs, batch_size)</code> \u8a55\u4f30\u6a21\u578b <code>model.evaluate(x_test, y_test)</code> <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u5b89\u88dd Keras \u4e26\u5efa\u7acb\u7b2c\u4e00\u500b\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u6df1\u5165\u63a2\u8a0e Keras \u7684\u6a21\u578b\u7d50\u69cb\u8207 API\uff01 \ud83d\ude0a</p>"},{"location":"models/","title":"3\ufe0f\u20e3 Keras \u57fa\u672c\u6a21\u578b","text":""},{"location":"models/#keras","title":"\ud83c\udfaf Keras \u7684\u6a21\u578b\u7d50\u69cb","text":"<p>\u5728 Keras \u4e2d\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 Sequential API \u6216 Functional API \u4f86\u69cb\u5efa\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\u3002</p> <p>\u2705 Sequential API\uff08\u9806\u5e8f\u6a21\u578b\uff09</p> <p>\u9019\u7a2e\u65b9\u5f0f\u9069\u5408 \u7dda\u6027\u5806\u758a \u7684\u6a21\u578b\uff0c\u6bcf\u4e00\u5c64\u6309\u7167\u9806\u5e8f\u5806\u758a\u3002</p> <pre><code>from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# \u5efa\u7acb\u9806\u5e8f\u6a21\u578b\nmodel = keras.Sequential([\n    layers.Dense(128, activation='relu', input_shape=(10,)),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(1, activation='sigmoid')\n])\n\nmodel.summary()\n</code></pre> <p>\u2705 \u9069\u7528\u65bc\u5927\u90e8\u5206\u7684\u795e\u7d93\u7db2\u8def\uff0c\u5982 MLP\uff08\u591a\u5c64\u611f\u77e5\u6a5f\uff09\u3002</p> <p>\u2705 Functional API\uff08\u51fd\u6578\u5f0f\u6a21\u578b\uff09</p> <p>Functional API \u5141\u8a31\u66f4\u9748\u6d3b\u7684\u6a21\u578b\u8a2d\u8a08\uff0c\u4f8b\u5982 \u591a\u8f38\u5165\u3001\u591a\u8f38\u51fa\u3001\u8df3\u8e8d\u9023\u63a5\u3002</p> <pre><code># \u5b9a\u7fa9\u8f38\u5165\u5c64\ninputs = keras.Input(shape=(10,))\n\n# \u96b1\u85cf\u5c64\nx = layers.Dense(64, activation='relu')(inputs)\nx = layers.Dense(32, activation='relu')(x)\n\n# \u8f38\u51fa\u5c64\noutputs = layers.Dense(1, activation='sigmoid')(x)\n\n# \u5efa\u7acb\u6a21\u578b\nmodel = keras.Model(inputs, outputs)\n\nmodel.summary()\n</code></pre> <p>\u2705 \u9069\u7528\u65bc\u8907\u96dc\u7684\u6a21\u578b\uff0c\u5982\u6b98\u5dee\u7db2\u8def\uff08ResNet\uff09\u3001\u6ce8\u610f\u529b\u6a5f\u5236\u7b49\u3002</p>"},{"location":"models/#dropout-batch-normalization","title":"\ud83c\udfaf \u589e\u5f37\u6a21\u578b\u529f\u80fd\uff1aDropout \u8207 Batch Normalization","text":"<p>\u2705 Dropout\uff08\u96a8\u6a5f\u5931\u6d3b\uff09</p> <p>Dropout \u6703\u96a8\u6a5f\u95dc\u9589\u90e8\u5206\u795e\u7d93\u5143\uff0c\u9632\u6b62 \u904e\u64ec\u5408\uff08Overfitting\uff09\u3002</p> <pre><code>model.add(layers.Dropout(0.5))\n</code></pre> <p>\u2705 Batch Normalization\uff08\u6279\u6b21\u6a19\u6e96\u5316\uff09</p> <p>Batch Normalization \u53ef\u52a0\u901f\u8a13\u7df4\uff0c\u7a69\u5b9a\u68af\u5ea6\u4e0b\u964d\u3002</p> <pre><code>model.add(layers.BatchNormalization())\n</code></pre>"},{"location":"models/#_1","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u6982\u5ff5 \u7528\u9014 Sequential API \u9069\u7528\u65bc\u7c21\u55ae\u7684\u7dda\u6027\u5806\u758a\u6a21\u578b Functional API \u9069\u7528\u65bc\u8907\u96dc\u7684\u591a\u8f38\u5165\u3001\u591a\u8f38\u51fa\u6a21\u578b Dropout \u9632\u6b62\u904e\u64ec\u5408\uff0c\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b Batch Normalization \u52a0\u901f\u8a13\u7df4\uff0c\u63d0\u9ad8\u6a21\u578b\u7a69\u5b9a\u6027 <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u4f7f\u7528 Keras \u5efa\u7acb\u4e0d\u540c\u985e\u578b\u7684\u6a21\u578b\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2\u5982\u4f55\u8a13\u7df4\u8207\u8a55\u4f30\u6a21\u578b\uff01 \ud83d\ude0a</p>"},{"location":"preprocessing/","title":"5\ufe0f\u20e3 Keras \u4e2d\u7684\u6578\u64da\u8655\u7406","text":""},{"location":"preprocessing/#_1","title":"\ud83c\udfaf \u70ba\u4ec0\u9ebc\u6578\u64da\u8655\u7406\u5f88\u91cd\u8981\uff1f","text":"<p>\u5728\u8a13\u7df4\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\u4e4b\u524d\uff0c\u6211\u5011\u901a\u5e38\u9700\u8981\u5c0d\u6578\u64da\u9032\u884c \u9810\u8655\u7406\uff08Preprocessing\uff09\uff0c\u4ee5\u78ba\u4fdd\u6a21\u578b\u53ef\u4ee5\u6709\u6548\u5b78\u7fd2\u3002</p> <p>\u2705 \u6578\u64da\u8655\u7406\u7684\u95dc\u9375\u6b65\u9a5f\uff1a</p> <ol> <li>\u6578\u64da\u6a19\u6e96\u5316\uff08Normalization\uff09</li> <li>\u6578\u64da\u589e\u5f37\uff08Data Augmentation\uff09</li> <li>\u6578\u64da\u5206\u5272\uff08Train / Validation / Test Split\uff09</li> <li>\u8655\u7406\u5f71\u50cf\u6578\u64da\uff08Image Processing\uff09</li> <li>\u8655\u7406\u6587\u672c\u6578\u64da\uff08Text Tokenization\uff09</li> </ol>"},{"location":"preprocessing/#normalization","title":"\u2705 \u6578\u64da\u6a19\u6e96\u5316\uff08Normalization\uff09","text":"<p>\u6578\u64da\u6a19\u6e96\u5316\u53ef\u4ee5\u8b93\u6240\u6709\u7279\u5fb5\u7684\u6578\u503c\u7bc4\u570d\u4e00\u81f4\uff0c\u63d0\u9ad8\u6a21\u578b\u8a13\u7df4\u7684\u7a69\u5b9a\u6027\u3002</p> <pre><code>import numpy as np\n\n# \u751f\u6210\u96a8\u6a5f\u6578\u64da\uff08\u6a21\u64ec\u7279\u5fb5\uff09\ndata = np.random.randint(0, 255, (100, 10), dtype=np.float32)\n\n# \u6a19\u6e96\u5316\u5230 [0, 1] \u5340\u9593\ndata_normalized = data / 255.0\n</code></pre> <p>\u2705 \u5e38\u898b\u7684\u6a19\u6e96\u5316\u65b9\u5f0f\u5305\u62ec Min-Max Scaling\uff08\u6b78\u4e00\u5316\u5230 0-1\uff09\u8207 Z-score \u6a19\u6e96\u5316\uff08\u5747\u503c 0\uff0c\u6a19\u6e96\u5dee 1\uff09\u3002</p>"},{"location":"preprocessing/#data-augmentation","title":"\u2705 \u6578\u64da\u589e\u5f37\uff08Data Augmentation\uff09","text":"<p>\u5728\u5f71\u50cf\u8655\u7406\u4e2d\uff0c\u6211\u5011\u53ef\u4ee5\u901a\u904e \u65cb\u8f49\u3001\u7ffb\u8f49\u3001\u7e2e\u653e \u4f86\u589e\u52a0\u6578\u64da\u591a\u6a23\u6027\u3002</p> <pre><code>from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    rotation_range=30, \n    width_shift_range=0.2, \n    height_shift_range=0.2, \n    horizontal_flip=True\n)\n</code></pre> <p>\u2705 \u9019\u6709\u52a9\u65bc\u63d0\u5347\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u9632\u6b62\u904e\u64ec\u5408\uff08Overfitting\uff09\u3002</p>"},{"location":"preprocessing/#_2","title":"\u2705 \u8a13\u7df4\u6578\u64da\u8207\u6e2c\u8a66\u6578\u64da\u5206\u5272","text":"<p>\u4e00\u822c\u4f86\u8aaa\uff0c\u6578\u64da\u61c9\u8a72\u6309\u7167 80% \u8a13\u7df4\uff08Training\uff09\u300110% \u9a57\u8b49\uff08Validation\uff09\u300110% \u6e2c\u8a66\uff08Testing\uff09 \u4f86\u5206\u5272\u3002</p> <pre><code>from sklearn.model_selection import train_test_split\n\n# \u751f\u6210\u96a8\u6a5f\u6578\u64da\ndata = np.random.rand(1000, 10)\nlabels = np.random.randint(0, 2, size=(1000,))\n\n# \u5206\u5272\u6578\u64da\nx_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)\n</code></pre> <p>\u2705 \u78ba\u4fdd\u6e2c\u8a66\u6578\u64da\u4e0d\u88ab\u7528\u65bc\u8a13\u7df4\uff0c\u4ee5\u6aa2\u9a57\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002</p>"},{"location":"preprocessing/#image-processing","title":"\u2705 \u5f71\u50cf\u6578\u64da\u8655\u7406\uff08Image Processing\uff09","text":"<p>\u5728 Keras \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>ImageDataGenerator</code> \u4f86\u8b80\u53d6\u8207\u589e\u5f37\u5f71\u50cf\u6578\u64da\u3002</p> <pre><code>train_datagen = ImageDataGenerator(rescale=1./255)\ntrain_generator = train_datagen.flow_from_directory(\n    'dataset/train',\n    target_size=(128, 128),\n    batch_size=32,\n    class_mode='binary'\n)\n</code></pre> <p>\u2705 \u9019\u5c07\u81ea\u52d5\u8b80\u53d6\u5f71\u50cf\u8cc7\u6599\u593e\uff0c\u4e26\u5c07\u5f71\u50cf\u7e2e\u653e\u5230 [0,1] \u5340\u9593\u3002</p>"},{"location":"preprocessing/#text-tokenization","title":"\u2705 \u8655\u7406\u6587\u672c\u6578\u64da\uff08Text Tokenization\uff09","text":"<p>\u5728 NLP \u9818\u57df\uff0c\u6211\u5011\u9700\u8981\u5c07\u6587\u672c\u8f49\u63db\u70ba\u6578\u5b57\u683c\u5f0f\u624d\u80fd\u8f38\u5165\u5230\u795e\u7d93\u7db2\u8def\u3002</p> <pre><code>from tensorflow.keras.preprocessing.text import Tokenizer\n\n# \u6587\u5b57\u6578\u64da\ndocuments = [\"I love deep learning\", \"Keras makes it easy\"]\n\n# \u5efa\u7acb Tokenizer\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(documents)\n\n# \u8f49\u63db\u70ba\u6578\u5b57\u5e8f\u5217\nsequences = tokenizer.texts_to_sequences(documents)\nprint(sequences)\n</code></pre> <p>\u2705 \u9019\u53ef\u4ee5\u5c07\u53e5\u5b50\u8f49\u63db\u70ba\u6578\u5b57\u5e8f\u5217\uff0c\u4ee5\u4fbf\u795e\u7d93\u7db2\u8def\u8655\u7406\u3002</p>"},{"location":"preprocessing/#_3","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u529f\u80fd \u8a9e\u6cd5 \u6578\u64da\u6a19\u6e96\u5316 <code>data / 255.0</code> \u5f71\u50cf\u589e\u5f37 <code>ImageDataGenerator(rotation_range=30, horizontal_flip=True)</code> \u6578\u64da\u5206\u5272 <code>train_test_split(data, labels, test_size=0.2)</code> \u5f71\u50cf\u6578\u64da\u8655\u7406 <code>flow_from_directory('dataset/train', target_size=(128,128))</code> \u6587\u672c Tokenization <code>texts_to_sequences(documents)</code> <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u5728 Keras \u4e2d\u9032\u884c\u6578\u64da\u9810\u8655\u7406\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2 Keras \u5728 CNN\uff08\u5377\u7a4d\u795e\u7d93\u7db2\u8def\uff09\u4e2d\u7684\u61c9\u7528\uff01 \ud83d\ude0a</p>"},{"location":"reinforcement_learning/","title":"9\ufe0f\u20e3 \u5f37\u5316\u5b78\u7fd2","text":""},{"location":"reinforcement_learning/#_1","title":"\ud83c\udfaf \u4ec0\u9ebc\u662f\u5f37\u5316\u5b78\u7fd2\uff1f","text":"<p>\u5f37\u5316\u5b78\u7fd2\uff08Reinforcement Learning, RL\uff09\u662f\u4e00\u7a2e \u57fa\u65bc\u734e\u52f5\u8207\u61f2\u7f70\u7684\u5b78\u7fd2\u65b9\u6cd5\uff0c\u5e38\u7528\u65bc \u904a\u6232 AI\u3001\u6a5f\u5668\u4eba\u63a7\u5236\u3001\u81ea\u52d5\u99d5\u99db \u7b49\u9818\u57df\u3002</p> <p>\u2705 \u5f37\u5316\u5b78\u7fd2\u7684\u6838\u5fc3\u6982\u5ff5\uff1a</p> <ol> <li>\u4ee3\u7406\uff08Agent\uff09\uff1a\u5b78\u7fd2\u8005\uff0c\u5982\u6a5f\u5668\u4eba\u6216 AI \u6a21\u578b\u3002</li> <li>\u74b0\u5883\uff08Environment\uff09\uff1a\u4ee3\u7406\u8207\u4e4b\u4e92\u52d5\u7684\u4e16\u754c\u3002</li> <li>\u52d5\u4f5c\uff08Action\uff09\uff1a\u4ee3\u7406\u53ef\u4ee5\u63a1\u53d6\u7684\u884c\u70ba\u3002</li> <li>\u72c0\u614b\uff08State\uff09\uff1a\u74b0\u5883\u5728\u67d0\u500b\u6642\u9593\u9ede\u7684\u60c5\u6cc1\u3002</li> <li>\u734e\u52f5\uff08Reward\uff09\uff1a\u4ee3\u7406\u6839\u64da\u52d5\u4f5c\u7372\u5f97\u7684\u56de\u994b\u3002</li> </ol>"},{"location":"reinforcement_learning/#q-learning","title":"\u2705 \u5efa\u7acb Q-learning \u6a21\u578b","text":"<p>Q-learning \u662f\u4e00\u7a2e\u57fa\u672c\u7684\u5f37\u5316\u5b78\u7fd2\u7b97\u6cd5\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 Keras \u4f86\u5efa\u7acb Q-learning \u795e\u7d93\u7db2\u8def\u3002</p> <pre><code>import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# \u5efa\u7acb Q-learning \u6a21\u578b\nmodel = keras.Sequential([\n    layers.Dense(24, activation='relu', input_shape=(4,)),\n    layers.Dense(24, activation='relu'),\n    layers.Dense(2, activation='linear')\n])\n\n# \u7de8\u8b6f\u6a21\u578b\nmodel.compile(optimizer='adam', loss='mse')\n</code></pre> <p>\u2705 \u9019\u662f\u4e00\u500b\u7528\u65bc OpenAI Gym CartPole \u7684\u57fa\u672c Q-learning \u6a21\u578b\u3002</p>"},{"location":"reinforcement_learning/#q-learning_1","title":"\u2705 \u8a13\u7df4 Q-learning \u6a21\u578b","text":"<p>\u5728\u5f37\u5316\u5b78\u7fd2\u4e2d\uff0c\u6211\u5011\u9700\u8981\u900f\u904e\u53cd\u8986\u8a66\u932f\u4f86\u5b78\u7fd2\u6700\u512a\u7b56\u7565\u3002</p> <pre><code>import gym\n\n# \u521d\u59cb\u5316\u74b0\u5883\nenv = gym.make(\"CartPole-v1\")\n\n# \u8a2d\u5b9a\u53c3\u6578\nnum_episodes = 1000\nfor episode in range(num_episodes):\n    state = env.reset()\n    state = np.reshape(state, [1, 4])\n    done = False\n    while not done:\n        action = np.argmax(model.predict(state)[0])\n        next_state, reward, done, _ = env.step(action)\n        next_state = np.reshape(next_state, [1, 4])\n        state = next_state\n</code></pre> <p>\u2705 \u9019\u6bb5\u7a0b\u5f0f\u78bc\u6703\u8b93 AI \u5617\u8a66\u5b78\u7fd2\u5982\u4f55\u5728 CartPole \u74b0\u5883\u4e2d\u53d6\u5f97\u8f03\u9ad8\u7684\u5206\u6578\u3002</p>"},{"location":"reinforcement_learning/#_2","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u6982\u5ff5 \u8aaa\u660e \u4ee3\u7406\uff08Agent\uff09 \u5b78\u7fd2\u8207\u6c7a\u7b56\u7684 AI \u6a21\u578b \u74b0\u5883\uff08Environment\uff09 AI \u8207\u4e4b\u4e92\u52d5\u7684\u4e16\u754c\uff0c\u5982\u904a\u6232\u3001\u7269\u7406\u5834\u666f \u52d5\u4f5c\uff08Action\uff09 \u4ee3\u7406\u53ef\u4ee5\u57f7\u884c\u7684\u884c\u70ba \u734e\u52f5\uff08Reward\uff09 \u4ee3\u7406\u6839\u64da\u52d5\u4f5c\u7372\u5f97\u7684\u56de\u994b <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u4f7f\u7528 Keras \u4f86\u5be6\u4f5c\u5f37\u5316\u5b78\u7fd2\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2 Keras \u5728\u9032\u968e\u61c9\u7528\u8207\u5c08\u6848\u793a\u7bc4\u4e2d\u7684\u61c9\u7528\uff01 \ud83d\ude0a</p>"},{"location":"rnn/","title":"7\ufe0f\u20e3 RNN\uff08\u5faa\u74b0\u795e\u7d93\u7db2\u8def\uff09","text":""},{"location":"rnn/#rnn","title":"\ud83c\udfaf \u4ec0\u9ebc\u662f RNN\uff1f","text":"<p>\u5faa\u74b0\u795e\u7d93\u7db2\u8def\uff08Recurrent Neural Network, RNN\uff09\u9069\u7528\u65bc \u5e8f\u5217\u6578\u64da\uff08Sequential Data\uff09\uff0c\u4f8b\u5982 \u6642\u9593\u5e8f\u5217\u3001\u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08NLP\uff09\u3001\u8a9e\u97f3\u8fa8\u8b58 \u7b49\u3002</p> <p>\u2705 RNN \u7684\u6838\u5fc3\u6982\u5ff5\uff1a</p> <ol> <li>\u6642\u9593\u6b65\u9577\uff08Timesteps\uff09\uff1a\u4fdd\u7559\u904e\u53bb\u8cc7\u8a0a\u4ee5\u5f71\u97ff\u672a\u4f86\u9810\u6e2c\u3002</li> <li>\u96b1\u85cf\u72c0\u614b\uff08Hidden State\uff09\uff1a\u5b58\u5132\u904e\u53bb\u8f38\u5165\u7684\u8cc7\u8a0a\u3002</li> <li>\u9577\u77ed\u671f\u8a18\u61b6\uff08LSTM\uff09\u8207\u9580\u63a7\u5faa\u74b0\u55ae\u5143\uff08GRU\uff09\uff1a\u89e3\u6c7a RNN \u8a13\u7df4\u6642\u7684\u9577\u671f\u4f9d\u8cf4\u554f\u984c\u3002</li> </ol>"},{"location":"rnn/#rnn_1","title":"\u2705 \u5efa\u7acb\u4e00\u500b RNN \u6a21\u578b","text":"<p>\u6211\u5011\u4f7f\u7528 Keras \u4f86\u5efa\u7acb\u4e00\u500b\u57fa\u672c\u7684 RNN \u6a21\u578b\u3002</p> <pre><code>from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# \u5efa\u7acb RNN \u6a21\u578b\nmodel = keras.Sequential([\n    layers.SimpleRNN(64, activation='relu', input_shape=(10, 1)),\n    layers.Dense(1, activation='sigmoid')\n])\n\n# \u7de8\u8b6f\u6a21\u578b\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n</code></pre> <p>\u2705 \u9019\u662f\u4e00\u500b\u9069\u7528\u65bc\u6642\u9593\u5e8f\u5217\u5206\u985e\u7684\u57fa\u672c RNN \u7d50\u69cb\u3002</p>"},{"location":"rnn/#lstm","title":"\u2705 LSTM\uff08\u9577\u77ed\u671f\u8a18\u61b6\u7db2\u8def\uff09","text":"<p>LSTM \u662f RNN \u7684\u6539\u9032\u7248\u672c\uff0c\u89e3\u6c7a\u4e86 \u68af\u5ea6\u6d88\u5931\uff08Vanishing Gradient\uff09 \u7684\u554f\u984c\u3002</p> <pre><code>model = keras.Sequential([\n    layers.LSTM(64, return_sequences=True, input_shape=(10, 1)),\n    layers.LSTM(32),\n    layers.Dense(1, activation='sigmoid')\n])\n</code></pre> <p>\u2705 LSTM \u9069\u7528\u65bc\u8f03\u9577\u7684\u5e8f\u5217\u6578\u64da\uff0c\u4f8b\u5982\u81ea\u7136\u8a9e\u8a00\u8655\u7406\uff08NLP\uff09\u3002</p>"},{"location":"rnn/#gru","title":"\u2705 GRU\uff08\u9580\u63a7\u5faa\u74b0\u55ae\u5143\uff09","text":"<p>GRU \u662f LSTM \u7684\u7c21\u5316\u7248\u672c\uff0c\u904b\u7b97\u8f03\u5feb\uff0c\u6548\u679c\u76f8\u8fd1\u3002</p> <pre><code>model = keras.Sequential([\n    layers.GRU(64, return_sequences=True, input_shape=(10, 1)),\n    layers.GRU(32),\n    layers.Dense(1, activation='sigmoid')\n])\n</code></pre> <p>\u2705 GRU \u5728\u5c0f\u578b\u6578\u64da\u96c6\u4e0a\u901a\u5e38\u6bd4 LSTM \u66f4\u9ad8\u6548\u3002</p>"},{"location":"rnn/#rnn_2","title":"\u2705 \u8a13\u7df4 RNN \u6a21\u578b","text":"<p>\u6211\u5011\u4f7f\u7528\u96a8\u6a5f\u751f\u6210\u7684\u6578\u64da\u4f86\u8a13\u7df4 RNN\u3002</p> <pre><code>import numpy as np\n\n# \u751f\u6210\u96a8\u6a5f\u6578\u64da\nx_train = np.random.rand(1000, 10, 1)\ny_train = np.random.randint(0, 2, size=(1000,))\n\n# \u8a13\u7df4\u6a21\u578b\nmodel.fit(x_train, y_train, epochs=10, batch_size=32)\n</code></pre> <p>\u2705 \u9019\u5c07\u8a13\u7df4 10 \u500b epochs\uff0c\u6bcf\u6b21 batch \u70ba 32\u3002</p>"},{"location":"rnn/#_1","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u529f\u80fd \u8a9e\u6cd5 RNN \u5c64 <code>SimpleRNN(units, activation)</code> LSTM \u5c64 <code>LSTM(units, return_sequences)</code> GRU \u5c64 <code>GRU(units, return_sequences)</code> \u6a21\u578b\u8a13\u7df4 <code>model.fit(x_train, y_train, epochs, batch_size)</code> <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u4f7f\u7528 Keras \u5efa\u7acb RNN\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2\u8f49\u79fb\u5b78\u7fd2\uff08Transfer Learning\uff09\uff01 \ud83d\ude0a</p>"},{"location":"training/","title":"4\ufe0f\u20e3 \u6a21\u578b\u8a13\u7df4\u8207\u8a55\u4f30","text":""},{"location":"training/#_1","title":"\ud83c\udfaf \u8a13\u7df4\u795e\u7d93\u7db2\u8def\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u5728\u5efa\u7acb Keras \u6a21\u578b\u5f8c\uff0c\u6211\u5011\u9700\u8981\u900f\u904e \u8a13\u7df4\uff08Training\uff09 \u4f86\u8abf\u6574\u6b0a\u91cd\uff0c\u4f7f\u6a21\u578b\u80fd\u5920\u5c0d\u61c9\u8f38\u5165\u6578\u64da\u9032\u884c\u6b63\u78ba\u7684\u9810\u6e2c\u3002</p> <p>\u2705 \u8a13\u7df4\u6d41\u7a0b\uff1a</p> <ol> <li>\u5b9a\u7fa9\u640d\u5931\u51fd\u6578\uff08Loss Function\uff09</li> <li>\u9078\u64c7\u512a\u5316\u5668\uff08Optimizer\uff09</li> <li>\u8a2d\u5b9a\u8a55\u4f30\u6307\u6a19\uff08Metrics\uff09</li> <li>\u57f7\u884c\u8a13\u7df4\uff08Fit Model\uff09</li> <li>\u6a21\u578b\u8a55\u4f30\uff08Evaluate Model\uff09</li> </ol>"},{"location":"training/#compile-model","title":"\u2705 \u7de8\u8b6f\u6a21\u578b\uff08Compile Model\uff09","text":"<p>Keras \u9700\u8981\u5728\u8a13\u7df4\u524d \u7de8\u8b6f\uff08compile\uff09 \u6a21\u578b\uff0c\u8a2d\u5b9a\u640d\u5931\u51fd\u6578\u8207\u512a\u5316\u5668\u3002</p> <pre><code>from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# \u5efa\u7acb\u6a21\u578b\nmodel = keras.Sequential([\n    layers.Dense(128, activation='relu', input_shape=(10,)),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(1, activation='sigmoid')\n])\n\n# \u7de8\u8b6f\u6a21\u578b\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy', \n    metrics=['accuracy']\n)\n</code></pre> <p>\u2705 <code>adam</code> \u662f\u4e00\u7a2e\u5e38\u7528\u7684\u512a\u5316\u5668\uff0c\u9069\u5408\u5927\u591a\u6578\u6df1\u5ea6\u5b78\u7fd2\u61c9\u7528\u3002</p>"},{"location":"training/#model-training","title":"\u2705 \u8a13\u7df4\u6a21\u578b\uff08Model Training\uff09","text":"<p>\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 <code>fit()</code> \u65b9\u6cd5\u4f86\u8a13\u7df4\u6a21\u578b\u3002</p> <pre><code>import numpy as np\n\n# \u5efa\u7acb\u5047\u8a2d\u6578\u64da\nx_train = np.random.rand(100, 10)\ny_train = np.random.randint(0, 2, size=(100,))\n\n# \u8a13\u7df4\u6a21\u578b\nmodel.fit(x_train, y_train, epochs=10, batch_size=32)\n</code></pre> <p>\u2705 <code>epochs=10</code> \u8868\u793a\u8a13\u7df4 10 \u6b21\u5b8c\u6574\u6578\u64da\u96c6\uff0c<code>batch_size=32</code> \u8868\u793a\u6bcf\u6b21\u66f4\u65b0 32 \u500b\u6a23\u672c\u3002</p>"},{"location":"training/#evaluate-model","title":"\u2705 \u6a21\u578b\u8a55\u4f30\uff08Evaluate Model\uff09","text":"<p>\u8a13\u7df4\u5b8c\u6210\u5f8c\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u6e2c\u8a66\u6578\u64da\u4f86\u8a55\u4f30\u6a21\u578b\u7684\u8868\u73fe\u3002</p> <pre><code>x_test = np.random.rand(20, 10)\ny_test = np.random.randint(0, 2, size=(20,))\n\n# \u8a55\u4f30\u6a21\u578b\nloss, acc = model.evaluate(x_test, y_test)\nprint(f\"\u6e2c\u8a66\u6e96\u78ba\u7387\uff1a{acc:.2f}\")\n</code></pre> <p>\u2705 \u9019\u5c07\u8fd4\u56de\u6a21\u578b\u7684\u640d\u5931\u8207\u6e96\u78ba\u7387\uff0c\u7528\u4f86\u8861\u91cf\u6a21\u578b\u7684\u6548\u80fd\u3002</p>"},{"location":"training/#validation_data","title":"\u2705 \u4f7f\u7528 <code>validation_data</code> \u9032\u884c\u9a57\u8b49","text":"<p>\u6211\u5011\u53ef\u4ee5\u5728\u8a13\u7df4\u904e\u7a0b\u4e2d\u4f7f\u7528 <code>validation_data</code> \u4f86\u89c0\u5bdf\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002</p> <pre><code>model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))\n</code></pre> <p>\u2705 \u9019\u6a23\u53ef\u4ee5\u770b\u5230\u8a13\u7df4\u6578\u64da\u8207\u9a57\u8b49\u6578\u64da\u7684\u6e96\u78ba\u7387\uff0c\u907f\u514d\u904e\u64ec\u5408\u3002</p>"},{"location":"training/#early-stopping","title":"\u2705 \u4f7f\u7528 Early Stopping \u9632\u6b62\u904e\u64ec\u5408","text":"<p>\u7576\u8a13\u7df4\u904e\u7a0b\u4e2d\u767c\u73fe \u9a57\u8b49\u96c6\u6e96\u78ba\u7387\u4e0d\u518d\u63d0\u5347\uff0c\u53ef\u4ee5\u900f\u904e <code>EarlyStopping</code> \u4f86\u505c\u6b62\u8a13\u7df4\u3002</p> <p><pre><code>from tensorflow.keras.callbacks import EarlyStopping\n\n# \u8a2d\u5b9a EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n\n# \u8a13\u7df4\u6a21\u578b\nmodel.fit(x_train, y_train, epochs=50, batch_size=32, validation_data=(x_test, y_test), callbacks=[early_stopping])\n</code></pre> \u2705 \u9019\u6a23\u53ef\u4ee5\u9632\u6b62\u6a21\u578b\u904e\u64ec\u5408\uff0c\u7576 <code>val_loss</code> \u9023\u7e8c 3 \u500b epochs \u6c92\u6709\u6539\u5584\u6642\u505c\u6b62\u8a13\u7df4\u3002</p>"},{"location":"training/#_2","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u529f\u80fd \u8a9e\u6cd5 \u7de8\u8b6f\u6a21\u578b <code>model.compile(optimizer, loss, metrics)</code> \u8a13\u7df4\u6a21\u578b <code>model.fit(x_train, y_train, epochs, batch_size)</code> \u8a55\u4f30\u6a21\u578b <code>model.evaluate(x_test, y_test)</code> \u4f7f\u7528\u9a57\u8b49\u6578\u64da <code>model.fit(x_train, y_train, validation_data=(x_test, y_test))</code> Early Stopping <code>EarlyStopping(monitor='val_loss', patience=3)</code> <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u8a13\u7df4\u8207\u8a55\u4f30 Keras \u6a21\u578b\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2 Keras \u5982\u4f55\u8655\u7406\u6578\u64da\uff01 \ud83d\ude0a</p>"},{"location":"transfer_learning/","title":"8\ufe0f\u20e3 \u8f49\u79fb\u5b78\u7fd2","text":""},{"location":"transfer_learning/#_1","title":"\ud83c\udfaf \u4ec0\u9ebc\u662f\u8f49\u79fb\u5b78\u7fd2\uff1f","text":"<p>\u8f49\u79fb\u5b78\u7fd2\uff08Transfer Learning\uff09\u662f\u4e00\u7a2e \u5229\u7528\u9810\u8a13\u7df4\u6a21\u578b \u4f86\u52a0\u901f\u65b0\u6a21\u578b\u8a13\u7df4\u7684\u6280\u8853\uff0c\u9069\u7528\u65bc \u5f71\u50cf\u5206\u985e\u3001\u7269\u4ef6\u5075\u6e2c\u3001NLP \u7b49\u61c9\u7528\u3002</p> <p>\u2705 \u8f49\u79fb\u5b78\u7fd2\u7684\u512a\u52e2\uff1a</p> <ol> <li>\u6e1b\u5c11\u8a13\u7df4\u6642\u9593\uff1a\u76f4\u63a5\u4f7f\u7528\u5df2\u8a13\u7df4\u597d\u7684\u6b0a\u91cd\u3002</li> <li>\u9069\u7528\u65bc\u5c0f\u578b\u6578\u64da\u96c6\uff1a\u4e0d\u9700\u8981\u5927\u91cf\u6a19\u8a3b\u6578\u64da\u3002</li> <li>\u63d0\u9ad8\u6a21\u578b\u6e96\u78ba\u7387\uff1a\u4f7f\u7528\u5927\u578b\u6578\u64da\u96c6\u8a13\u7df4\u7684\u7279\u5fb5\u3002</li> </ol>"},{"location":"transfer_learning/#vgg16","title":"\u2705 \u4f7f\u7528\u9810\u8a13\u7df4\u6a21\u578b\uff08VGG16\uff09","text":"<p>\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 Keras \u5167\u5efa\u7684 VGG16 \u6a21\u578b\u9032\u884c\u5f71\u50cf\u5206\u985e\u3002</p> <pre><code>from tensorflow import keras\nfrom tensorflow.keras.applications import VGG16\n\n# \u8f09\u5165 VGG16 \u9810\u8a13\u7df4\u6a21\u578b\uff08\u53bb\u9664\u9802\u90e8\u5168\u9023\u63a5\u5c64\uff09\nbase_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# \u51cd\u7d50\u9810\u8a13\u7df4\u5c64\nfor layer in base_model.layers:\n    layer.trainable = False\n</code></pre> <p>\u2705 \u9019\u6a23\u53ef\u4ee5\u4fdd\u7559 VGG16 \u5b78\u5230\u7684\u7279\u5fb5\uff0c\u907f\u514d\u904e\u5ea6\u8a13\u7df4\u3002</p>"},{"location":"transfer_learning/#_2","title":"\u2705 \u52a0\u5165\u81ea\u8a02\u5206\u985e\u5c64","text":"<p>\u6211\u5011\u53ef\u4ee5\u5728 VGG16 \u9802\u90e8\u52a0\u5165\u81ea\u8a02\u7684\u5168\u9023\u63a5\u5c64\u3002</p> <pre><code>from tensorflow.keras import layers, models\n\n# \u5efa\u7acb\u65b0\u6a21\u578b\nmodel = models.Sequential([\n    base_model,\n    layers.Flatten(),\n    layers.Dense(256, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\n# \u7de8\u8b6f\u6a21\u578b\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n</code></pre> <p>\u2705 \u9019\u6a23\u53ef\u4ee5\u8b93\u6a21\u578b\u9069\u61c9\u65b0\u7684\u6578\u64da\u96c6\uff0c\u9032\u884c\u5206\u985e\u4efb\u52d9\u3002</p>"},{"location":"transfer_learning/#_3","title":"\u2705 \u8a13\u7df4\u8f49\u79fb\u5b78\u7fd2\u6a21\u578b","text":"<p>\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 ImageDataGenerator \u4f86\u8655\u7406\u5f71\u50cf\u6578\u64da\u4e26\u8a13\u7df4\u6a21\u578b\u3002</p> <pre><code>from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# \u8a2d\u5b9a\u6578\u64da\u589e\u5f37\ntrain_datagen = ImageDataGenerator(rescale=1./255, rotation_range=30, horizontal_flip=True)\ntrain_generator = train_datagen.flow_from_directory(\n    'dataset/train', target_size=(224, 224), batch_size=32, class_mode='categorical')\n\n# \u8a13\u7df4\u6a21\u578b\nmodel.fit(train_generator, epochs=10)\n</code></pre> <p>\u2705 \u9019\u6a23\u53ef\u4ee5\u8b93\u6a21\u578b\u5b78\u7fd2\u65b0\u6578\u64da\u7684\u7279\u5fb5\uff0c\u63d0\u9ad8\u5206\u985e\u6e96\u78ba\u7387\u3002</p>"},{"location":"transfer_learning/#_4","title":"\ud83d\udcdd \u7e3d\u7d50","text":"\u529f\u80fd \u8a9e\u6cd5 \u8f09\u5165 VGG16 \u9810\u8a13\u7df4\u6a21\u578b <code>VGG16(weights='imagenet', include_top=False)</code> \u51cd\u7d50\u9810\u8a13\u7df4\u5c64 <code>layer.trainable = False</code> \u6dfb\u52a0\u81ea\u8a02\u5206\u985e\u5c64 <code>model.add(Dense(256, activation='relu'))</code> \u4f7f\u7528\u6578\u64da\u589e\u5f37 <code>ImageDataGenerator(rotation_range=30, horizontal_flip=True)</code> <p>\ud83d\ude80 \u73fe\u5728\u4f60\u5df2\u7d93\u5b78\u6703\u5982\u4f55\u4f7f\u7528 Keras \u9032\u884c\u8f49\u79fb\u5b78\u7fd2\uff01\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u5b78\u7fd2 Keras \u5728\u5f37\u5316\u5b78\u7fd2\uff08Reinforcement Learning\uff09\u4e2d\u7684\u61c9\u7528\uff01 \ud83d\ude0a</p>"}]}